#!/bin/bash
#
# Move (rename) Python virtualenvs


create_backup(){
    BACKUP_PATH=$(mktemp -u "$SOURCE_PATH.XXXXXX")
    cp -a "$SOURCE_PATH" "$BACKUP_PATH"
}


do_mv(){
    local BACKUP_PATH DEST_PATH SOURCE_PATH

    DEST_PATH=$(realpath "$2")
    SOURCE_PATH=$(realpath "$1")

    create_backup

    # move directory
    DEST_PATH=$(mv -v "$SOURCE_PATH" "$DEST_PATH" | awk -F[‘’] '{print $(NF-1)}')
    [[ $? -eq 0 && -n $DEST_PATH ]] || {
        fatal "encountered an error while moving ‘$SOURCE_PATH’"
    }

    # ensure move was successful
    is_virtualenv "$DEST_PATH" || {
        fatal "failed to move ‘$SOURCE_PATH’ to ‘$DEST_PATH’"
    }

    # find and replace old virtualenv path with new
    {
        find "$DEST_PATH/bin" -type f -print0
        find "$DEST_PATH/lib" -type f -name RECORD -print0
    } | xargs -0r -- rgrep --files-with-matches --null "$SOURCE_PATH" \
      | xargs -0r -- sed -i "s:$SOURCE_PATH:$DEST_PATH:g"

    # detect whether virtual environment is a venv
    # venv activation scripts require extra work
    if [[ -f $DEST_PATH/pyvenv.cfg ]]; then
        VENV_NAME=$(basename "$DEST_PATH")
        sed -i "s:if \[ \"x(\S\+) \" != x \] ; then$:if [ \"x(${VENV_NAME}) \" != x ] ; then:;s:PS1=\"(\S\+) \$PS1\"$:PS1=\"(${VENV_NAME}) \$PS1\":" "$DEST_PATH/bin/activate"
        sed -i "s:if (\"\S\+\" != \"\") then$:if (\"${VENV_NAME}\" != \"\") then:;s:set env_name = \"\S\+\"$:set env_name = \"${VENV_NAME}\":" "$DEST_PATH/bin/activate.csh"
        sed -i "s:if test -n \"(\S\+) \"$:if test -n \"(${VENV_NAME}) \":;s:printf \"%s%s%s\" \"(\S\+) \" (set_color normal) (_old_fish_prompt)$:printf \"%s%s%s\" \"(${VENV_NAME}) \" (set_color normal) (_old_fish_prompt):" "$DEST_PATH/bin/activate.fish"
    fi

    # fix any dangling symlinks
    while read -rd $'\0' path; do
        ln -fs "${path/local\/}" "$path"
    done < <(find "$DEST_PATH/local" -type l -print0 2>/dev/null)

    remove_backup
}


fatal(){
    echo "$PROGRAM: $1" >&2
    restore_backup
    exit 1
}


fatal_info(){
    echo "$PROGRAM: $1" >&2
    echo "Try '$PROGRAM --help' for more information." >&2
    exit 1
}


is_virtualenv(){
    [[ -d $1 && -f $1/bin/activate ]]
}


remove_backup(){
    if [[ -d $BACKUP_PATH ]]; then
        rm -rf "$BACKUP_PATH"
    fi
}


restore_backup(){
    if [[ -d $BACKUP_PATH ]]; then
        rm -rf "$DEST_PATH"
        rm -rf "$SOURCE_PATH" &>/dev/null
        mv "$BACKUP_PATH" "$SOURCE_PATH"
    fi
}


usage(){
    echo "Usage: $PROGRAM SOURCE DEST"
    echo "  or:  $PROGRAM SOURCE DIRECTORY"
    echo 'Rename SOURCE to DEST, or move SOURCE to DIRECTORY.'
    exit 0
}


PROGRAM=${0##*/}

if (( $# == 0 )); then
    fatal_info 'missing file operand'
elif (( $# == 1 )) && [[ $1 =~ ^(-h|--help)$ ]]; then
    usage
elif (( $# == 1 )); then
    fatal_info "missing destination operand after ‘$1’"
elif (( $# == 2 )) && ! is_virtualenv "$1"; then
    fatal_info "‘$1’ is not a virtualenv"
elif (( $# >= 3 )); then
    fatal_info "extra operand ‘$3’"
fi

do_mv "$@"
